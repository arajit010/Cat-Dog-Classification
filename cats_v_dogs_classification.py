# -*- coding: utf-8 -*-
"""Copy of cats-v-dogs-classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/136zs9l23k2QxC7LS_yKobMCZ3Z1Zt-Vb
"""

# Dataset - https://www.kaggle.com/datasets/salader/dogs-vs-cats

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/

!kaggle datasets download -d tongpython/cat-and-dog

import zipfile
zip_ref = zipfile.ZipFile('/content/cat-and-dog.zip', 'r')
zip_ref.extractall('/content')
zip_ref.close()

import tensorflow as tf
from keras.preprocessing.image import ImageDataGenerator
print(tf.__version__)

# generators
train_datagen=ImageDataGenerator(
rescale=1./255,
shear_range=0.2,
zoom_range=0.2,
horizontal_flip=True)

training_set=train_datagen.flow_from_directory(
'/content/training_set/training_set',
target_size=(64,64),
batch_size=32,
class_mode='binary')

# Normalize
test_datagen=ImageDataGenerator(rescale=1./255)
test_set=test_datagen.flow_from_directory(
'/content/test_set/test_set',
target_size=(64,64),
batch_size=32,
class_mode='binary')

# create CNN model
cnn = tf.keras.models.Sequential()

cnn.add(tf.keras.layers.Conv2D(filters=32,kernel_size=3,activation='relu',input_shape=[64,64,3]))
cnn.add(BatchNormalization())

cnn.add(tf.keras.layers.MaxPool2D(pool_size=2,strides=2))

cnn.add(tf.keras.layers.Conv2D(filters=32,kernel_size=3,activation='relu'))
cnn.add(tf.keras.layers.MaxPool2D(pool_size=2,strides=2))

cnn.add(tf.keras.layers.Flatten())

cnn.add(tf.keras.layers.Dense(units=128,activation='relu'))

cnn.add(tf.keras.layers.Dense(units=1,activation='sigmoid'))

cnn.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

cnn.fit(x = training_set, validation_data = test_set, epochs = 14)

import pandas as pd
import numpy as np
from tensorflow.keras.preprocessing import image
test_image=image.load_img('/content/img1.jpg',target_size=(64,64))
test_image=image.img_to_array(test_image)
test_image=np.expand_dims(test_image,axis=0)
result=cnn.predict(test_image)
training_set.class_indices
if(result[0][0]==1):
    prediction='dog'
else:
    prediction='cat'
print(prediction)

model.summary()

model.save(r'cat_dog.h5')













